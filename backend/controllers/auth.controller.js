import genToken from "../config/token.js";
import User from "../models/user.model.js";
import bcrypt from "bcryptjs";

export const signUp=async (req,res)=>{
   try{
     const {name,email,password}=req.body;
     console.log(req.body);
    //To check whether the email already exist
    const existEmail=await User.findOne({email});
    if(existEmail){
        return res.status(400).json({message:"Email already exists"});
    }
    //Password should be of min 6 characters
    if(password.length<6){
        return res.status(400).json({message:"Password must be atleast of 6 characters!"});
    }
    const hashedPassword=await bcrypt.hash(password,10);
   
    //Creating the user
    const user=User.create({
        name,email,password:hashedPassword
    })
    
    //Generate the token when is the user is being created.Token will be generated by userid and that token will be stored in the cookies
    const token=await genToken(user._id)
    //passing the token into cookies
    res.cookie("token",token,{
        httpOnly:true,
        maxAge:7*24*60*60*1000,
        sameSite:"None",
        secure:true
    })
    return res.status(201).json(user)

    return res.status(201).json(user);
   }catch(error){
    res.status(500).json({message:`Sign Up error ${error}`})
   }
}

//Login Function
export const Login = async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log(req.body);

    // 1. Check if user exists
    const userExist = await User.findOne({ email });
    if (!userExist) {
      return res.status(400).json({ message: "Not Registered!!!" });
    }

    // 2. Compare password
    const isMatch = await bcrypt.compare(password, userExist.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Incorrect Password!!!" });
    }

    // 3. Generate token
    const token = await genToken(userExist._id);

    // 4. Set cookie
    res.cookie("token", token, {
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
      sameSite: "None",
      secure: true, // set true if using https
    });

    // 5. Send response
    return res.status(200).json({
      message: "Login Successful",
      user: {
        id: userExist._id,
        name: userExist.name,
        email: userExist.email,
      },
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ message: `Login error: ${error.message}` });
  }
};

export const Logout=async (req,res)=>{
    //The user will be login until the token is stored in the cookie.When the token is removed from the cookie then the user gets looged out.
    try {
        res.clearCookie("token");
        res.status(200).json({message:"Logout Successfully!!!"})
    } catch (error) {        
         res.status(500).json({message:`Logout error ${error}`})
    }
}
